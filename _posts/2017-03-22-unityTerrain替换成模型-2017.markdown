---
layout:     post
title:      "unityTerrain替换成模型方法"
subtitle:   " \"unity Terrain 模型\""
date:       2017-03-22
author:     "LOFOXO"
header-img: "img/terrain-bg-2017.jpg"
catalog: true
tags:
    - Scenes
---

> “unityTerrain替换成模型方法”

前言
--
使用unity制作场景的过程中，Terrain是性能优化的一大问题，对于Terrain的优化最好方式是能够
直接将其转化为模型文件，同时又不会影响其在unity编辑好的效果。在这之前，一直没有比较好的方
式去解决这个问题，最近在mc项目的优化过程中偶然发现一种方法可以较为完美地解决这个问题。

**注：本方法对于Terrain的贴图数量有限制，要求在三张或三张以下（rgb），当然大神可以通过修
改shader的方式去将图片的alpha通道加入其中，这样可以用到四张贴图**

解决方案
----

将unity编辑好的Terrain转化为模型的思路主要分为两个部分：

 1. 将Terrain系统的模型转化为max可编辑的模型文件obj
 2. 将Terrain编辑后的SplatAlpha文件导出成ps可以编辑的图片文件


模型文件的导出
--------
在mc项目主城中创建的一个Terrain进行编辑完成后如图

![](/blog.github.io/img/post-terrain/post-terrain-01.png)
这里Terrain主要用到了三张贴图，一张草地的，一张海边缘的沙子，一张道路的土。

在优化项目的过程中偶然发现了一个可以将Terrain导出成obj的脚本，瞬间联想到可以将obj导入max
中进行减面转换格式等操作，同时，可以将Terrain编辑好的那张颜色贴图导出作为各个贴图的混合贴
图。
Terrain导出成obj的脚本如下
```
using UnityEngine;
using UnityEditor;
using System;
using System.Collections;
using System.IO;
using System.Text;

enum SaveFormat { Triangles, Quads }
enum SaveResolution { Full = 0, Half, Quarter, Eighth, Sixteenth }

class ExportTerrain : EditorWindow
{
    SaveFormat saveFormat = SaveFormat.Triangles;
    SaveResolution saveResolution = SaveResolution.Half;

    static TerrainData terrain;
    static Vector3 terrainPos;

    int tCount;
    int counter;
    int totalCount;
    int progressUpdateInterval = 10000;

    [MenuItem("Terrain/Export To Obj...")]
    static void Init()
    {
        terrain = null;
        Terrain terrainObject = Selection.activeObject as Terrain;
        if (!terrainObject)
        {
            terrainObject = Terrain.activeTerrain;
        }
        if (terrainObject)
        {
            terrain = terrainObject.terrainData;
            terrainPos = terrainObject.transform.position;
        }

        EditorWindow.GetWindow<ExportTerrain>().Show();
    }

    void OnGUI()
    {
        if (!terrain)
        {
            GUILayout.Label("No terrain found");
            if (GUILayout.Button("Cancel"))
            {
                EditorWindow.GetWindow<ExportTerrain>().Close();
            }
            return;
        }
        saveFormat = (SaveFormat)EditorGUILayout.EnumPopup("Export Format", saveFormat);

        saveResolution = (SaveResolution)EditorGUILayout.EnumPopup("Resolution", saveResolution);

        if (GUILayout.Button("Export"))
        {
            Export();
        }
    }

    void Export()
    {
        string fileName = EditorUtility.SaveFilePanel("Export .obj file", "", "Terrain", "obj");
        int w = terrain.heightmapWidth;
        int h = terrain.heightmapHeight;
        Vector3 meshScale = terrain.size;
        int tRes = (int)Mathf.Pow(2, (int)saveResolution);
        meshScale = new Vector3(meshScale.x / (w - 1) * tRes, meshScale.y, meshScale.z / (h - 1) * tRes);
        Vector2 uvScale = new Vector2(1.0f / (w - 1), 1.0f / (h - 1));
        float[,] tData = terrain.GetHeights(0, 0, w, h);

        w = (w - 1) / tRes + 1;
        h = (h - 1) / tRes + 1;
        Vector3[] tVertices = new Vector3[w * h];
        Vector2[] tUV = new Vector2[w * h];

        int[] tPolys;

        if (saveFormat == SaveFormat.Triangles)
        {
            tPolys = new int[(w - 1) * (h - 1) * 6];
        }
        else
        {
            tPolys = new int[(w - 1) * (h - 1) * 4];
        }

        // Build vertices and UVs
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                tVertices[y * w + x] = Vector3.Scale(meshScale, new Vector3(-y, tData[x * tRes, y * tRes], x)) + terrainPos;
                tUV[y * w + x] = Vector2.Scale(new Vector2(x * tRes, y * tRes), uvScale);
            }
        }

        int index = 0;
        if (saveFormat == SaveFormat.Triangles)
        {
            // Build triangle indices: 3 indices into vertex array for each triangle
            for (int y = 0; y < h - 1; y++)
            {
                for (int x = 0; x < w - 1; x++)
                {
                    // For each grid cell output two triangles
                    tPolys[index++] = (y * w) + x;
                    tPolys[index++] = ((y + 1) * w) + x;
                    tPolys[index++] = (y * w) + x + 1;

                    tPolys[index++] = ((y + 1) * w) + x;
                    tPolys[index++] = ((y + 1) * w) + x + 1;
                    tPolys[index++] = (y * w) + x + 1;
                }
            }
        }
        else
        {
            // Build quad indices: 4 indices into vertex array for each quad
            for (int y = 0; y < h - 1; y++)
            {
                for (int x = 0; x < w - 1; x++)
                {
                    // For each grid cell output one quad
                    tPolys[index++] = (y * w) + x;
                    tPolys[index++] = ((y + 1) * w) + x;
                    tPolys[index++] = ((y + 1) * w) + x + 1;
                    tPolys[index++] = (y * w) + x + 1;
                }
            }
        }

        // Export to .obj
        StreamWriter sw = new StreamWriter(fileName);
        try
        {

            sw.WriteLine("# Unity terrain OBJ File");

            // Write vertices
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            counter = tCount = 0;
            totalCount = (tVertices.Length * 2 + (saveFormat == SaveFormat.Triangles ? tPolys.Length / 3 : tPolys.Length / 4)) / progressUpdateInterval;
            for (int i = 0; i < tVertices.Length; i++)
            {
                UpdateProgress();
                StringBuilder sb = new StringBuilder("v ", 20);
                // StringBuilder stuff is done this way because it's faster than using the "{0} {1} {2}"etc. format
                // Which is important when you're exporting huge terrains.
                sb.Append(tVertices[i].x.ToString()).Append(" ").
                   Append(tVertices[i].y.ToString()).Append(" ").
                   Append(tVertices[i].z.ToString());
                sw.WriteLine(sb);
            }
            // Write UVs
            for (int i = 0; i < tUV.Length; i++)
            {
                UpdateProgress();
                StringBuilder sb = new StringBuilder("vt ", 22);
                sb.Append(tUV[i].x.ToString()).Append(" ").
                   Append(tUV[i].y.ToString());
                sw.WriteLine(sb);
            }
            if (saveFormat == SaveFormat.Triangles)
            {
                // Write triangles
                for (int i = 0; i < tPolys.Length; i += 3)
                {
                    UpdateProgress();
                    StringBuilder sb = new StringBuilder("f ", 43);
                    sb.Append(tPolys[i] + 1).Append("/").Append(tPolys[i] + 1).Append(" ").
                       Append(tPolys[i + 1] + 1).Append("/").Append(tPolys[i + 1] + 1).Append(" ").
                       Append(tPolys[i + 2] + 1).Append("/").Append(tPolys[i + 2] + 1);
                    sw.WriteLine(sb);
                }
            }
            else
            {
                // Write quads
                for (int i = 0; i < tPolys.Length; i += 4)
                {
                    UpdateProgress();
                    StringBuilder sb = new StringBuilder("f ", 57);
                    sb.Append(tPolys[i] + 1).Append("/").Append(tPolys[i] + 1).Append(" ").
                       Append(tPolys[i + 1] + 1).Append("/").Append(tPolys[i + 1] + 1).Append(" ").
                       Append(tPolys[i + 2] + 1).Append("/").Append(tPolys[i + 2] + 1).Append(" ").
                       Append(tPolys[i + 3] + 1).Append("/").Append(tPolys[i + 3] + 1);
                    sw.WriteLine(sb);
                }
            }
        }
        catch (Exception err)
        {
            Debug.Log("Error saving file: " + err.Message);
        }
        sw.Close();

        terrain = null;
        EditorUtility.DisplayProgressBar("Saving file to disc.", "This might take a while...", 1f);
        EditorWindow.GetWindow<ExportTerrain>().Close();
        EditorUtility.ClearProgressBar();
    }

    void UpdateProgress()
    {
        if (counter++ == progressUpdateInterval)
        {
            counter = 0;
            EditorUtility.DisplayProgressBar("Saving...", "", Mathf.InverseLerp(0, totalCount, ++tCount));
        }
    }
}

```
**记得将脚本放在Editor文件夹下，这样在unity的上方会出现一个Terrain的按钮，点开进行操作**

模型的处理
--------
接下来主要要做的就是将obj的模型文件导入到max中，将其根据需要进行减面，最后导出成fbx文件导
入到unity中进行使用

如图所示，这是导出的obj文件导入到max的相关情况，可以看出面数上超高了

![](/blog.github.io/img/post-terrain/post-terrain-02.jpg)

这里推荐大家一个简单省事的建模操作，利用max自带的Multires自动减面修改器进行修改。根据自己
的需求进行适当的减面。这里讲原来十几万面的模型减到了两千多个三角面，完全符合了手游的要求

如下图所示为减面后的模型：
![](/blog.github.io/img/post-terrain/post-terrain-03.jpg)

将减面后的模型文件导入到unity中，和原来的Terrain进行大小上的调整。

混合贴图的制作
--------
为了和原来Terrain编辑好的效果一模一样，我们需要将Terrain文件内的混合贴图导出，以便我们的
使用
如下图所示，SplatAlpha0就是我们地形编辑好的混合贴图文件，我们用一个在网络上收集来的脚本进
行导出。
![](/blog.github.io/img/post-terrain/post-terrain-05.jpg)
**注：该脚本是之前为了能够在ps上编辑Terrain贴图而设计的，功能强大，万能的网友们的分享精神
真是太棒了。在解决这个问题时瞬间想到这个制作混合贴图的方法。**
本脚本为js脚本：
```
#pragma strict
import System.IO;

@MenuItem("Terrain/Splatmap Helper/0 - Instructions - CLICK FIRST TO READ")
static function Info () {

	EditorUtility.DisplayDialog("The gist... (1/2)", "This tool is designed to help with basic conversion from a Splatmap<->PNG and back again. Note that it can easily destroy your terrain's splatmap if something goes wrong, so BACK UP your project first.\n\nTool #1 - Select your splatmap from your assets folder (a child under what usually looks like 'New Terrain 1.asset'), and it will ask you for a location in which to make a new PNG.\n\nTool #2 - Select a PNG you have worked on, and this will convert it to a splatmap-friendly format.\n\nTool #3 - Select your splatmap (similar to #1), and it will ask you for a PNG (that you probably ran through #2) to copy over your splatmap.\n\nCaveats are shown on the next page, but more info can be found at http://mattgadient.com/2014/09/28/unity3d-a-free-script-to-convert-a-splatmap-to-a-png/", "Next");
	EditorUtility.DisplayDialog("The gist... (2/2)", "There are some caveats to watch for, because a splatmap puts the 4 texture strengths in the 4 color channels (1 each in R,G,B,A).\n\n1) Most image editors don't like this, so this tool (TOOL #1) sets that 'A' channel to full. While this basically destroys any splat info about your 4th texture, it makes it possible to work on and edit the first 3 channels of the PNG or otherwise cut/rotate/edit/modify the thing. When you're done editing the PNG, TOOL #2 will try to recalculate the 'A' channel based on what R,G,B are (normally they should add up to 1.0).\n\n2) Due to the above, after you've finished with the PNG and run #2 to get the transparancy added again, the image MAY LOOK TRANSPARANT in your file browser (so don't panic on step #3 when you browse for the file and see it's transparant).\n\n3) During TOOL #3, you may need to set the READ/WRITE flag for the PNG texture so that it can read from it. This is done by selecting the PNG, choosing 'Advanced' for the texture type, and enabling the flag. If you choose to overwrite any previous files in #1 or #2, you may need to do so as well.\n\nMore info at http://mattgadient.com/2014/09/28/unity3d-a-free-script-to-convert-a-splatmap-to-a-png/", "OK");
}

@MenuItem("Terrain/Splatmap Helper/1 - Save Selected Splatmap to PNG")
static function CreatePNG () {

	if (!EditorUtility.DisplayDialog("Saving a Splatmap to PNG - How this works...", "BACK UP YOUR PROJECT FIRST (at the very least, your terrain...). This will let you choose a file to save a PNG of your selected splatmap. Note that the 4th texture in your splatmap (if it exists) is normally stored in the transparant layer. This will convert that layer to opaque (1.0) so it can be edited in Photoshop/etc.\n\nThis means that the 4th texture's splatmap position basically will NOT EXIST in the PNG.\n\nWhen you are finished editing, one of the other helper options can recalculate the 4th channel by subtracting the strengths of the first 3.\n\nIf you wish to proceed, make sure you have selected the splatmap (usually a child object of your terrain in the assets folder).", "Continue", "Cancel")) {
		return;
	}

	var texture1 : Texture2D = Selection.activeObject as Texture2D;
	if (texture1 == null) {
	   EditorUtility.DisplayDialog("Select A Splatmap", "You need to select a texture first (the splatmap).", "OK");
	   return;
	}

	var path = EditorUtility.SaveFilePanelInProject("Save Splatmap as PNG", "splatmap-to-png", "png", "Select the location to save the new PNG splatmap.");
	if (path.Length != 0) {

		var texture = Instantiate(texture1) as Texture2D;
		var textureColors = texture.GetPixels();
		for (var i : int = 0; i < textureColors.Length; i++) {
			textureColors[i].a = 1;
		}

		texture.SetPixels(textureColors);
		texture.Apply();

		if(texture.format != TextureFormat.ARGB32 && texture.format != TextureFormat.RGB24) {
			var newTexture = Texture2D(texture.width, texture.height);
			newTexture.SetPixels(texture.GetPixels(0),0);
			texture = newTexture;
		}

		var bytes = texture.EncodeToPNG();
		File.WriteAllBytes(path, bytes);
		AssetDatabase.Refresh();
   }
}

@MenuItem("Terrain/Splatmap Helper/2 - Turn PNG Back Into Splatmap Format")
static function Fix() {

	if (!EditorUtility.DisplayDialog("Turning a PNG into a splatmap - How this works...", "BACK UP YOUR PROJECT FIRST (at the very least, your terrain...).\n\nIf you have edited a PNG, you might get lucky and it may plunk into whatever terrain system you're using and look correct.\n\nIf not, this utility will try to recalculate the 4th texture channel of the splatmap (based on the strengths of the first 3), and re-save the file.\n\nNote that it will OVERWRITE your exiting PNG with the new data so make sure you have an extra copy of it somewhere!!!\n\nBefore this works, you wil have to select your PNG's texture file, choose 'Advanced', and set Read/Write to 'enabled'.\n\nIf you already selected the PNG you want to modify (and have a backup!), you can continue. Otherwise, hit cancel.", "Continue", "Cancel")) {
		return;
	}

	var texture1 : Texture2D = Selection.activeObject as Texture2D;
  	if (texture1 == null) {
	      EditorUtility.DisplayDialog("Select the PNG First!", "You need to select the PNG from your assets first! Do so, and then try again.", "OK");
	      return;
	   }
	var texture2 = Instantiate(texture1) as Texture2D;

	if(texture2.format != TextureFormat.ARGB32 && texture1.format != TextureFormat.RGB24) {
			var newTexture = Texture2D(texture2.width, texture2.height);
			newTexture.SetPixels(texture2.GetPixels(0),0);
			texture2 = newTexture;
			texture2.Apply();
	}

	var textureColors : Color[] = texture2.GetPixels();

	for (var i : int = 0; i < textureColors.Length; i++) {
		textureColors[i].a = 1.0-(textureColors[i].r+textureColors[i].g+textureColors[i].b); //Your [B]a[/B] components will be set to whatever is leftover from the other components, when summed)
	}

	texture2.SetPixels(textureColors );
	texture2.Apply();

	var path = EditorUtility.SaveFilePanelInProject("Location for new Splatmap", "new-splatmap", "png", "Select the location to save the new PNG splatmap.");
	if (path.Length != 0) {
			var bytes = texture2.EncodeToPNG();
			File.WriteAllBytes(path, bytes);
			AssetDatabase.Refresh();
			EditorUtility.DisplayDialog("Done!", "If it worked, the location of the PNG should show up in your debug log, and there should be no errors.\n\nIf you tried overwriting the original and didn't have read/write flags set, it may not have worked. Either save to a new location, or enable those flags.", "OK");
	} else {

	}

//  Original version - not used, as it requires the original to be marked read/write and people might not expect the original to be overwritten anyway.
//	If you want to modify this to save into your original file by default instead of asking, you'll have to pull some stuff from lines #121-124 and modify a litttle.
//	Debug.Log("Writing to " + AssetDatabase.GetAssetPath(texture1));
// 	File.WriteAllBytes(AssetDatabase.GetAssetPath(texture1), bytes);

}

@MenuItem("Terrain/Splatmap Helper/3 - Replace Unity Terrain Splatmap With New PNG")

static function Replace() {

	if (!EditorUtility.DisplayDialog("Replacing your existing Splatmap with a PNG - How this works...", "BACK UP YOUR PROJECT FIRST (at the very least, your terrain...).\n\nThis will attempt to replace the Unity Terrain Splatmap (that you hopefully selected already) with a new PNG.\n\nThe new PNG must have the read/write flag turned on (select the PNG, then change 'Texture Type' to 'Advanced' to set it).\n\nYou should have already backed up your existing terrain data (both the gameobject, and the terrain ASSET in your assets folder - you really SHOULD back up your whole project just in case...) - I can not stress how important that is, because if something goes wrong, YOUR TERRAIN MIGHT BE TOAST.\n\nIf you're ready and already selected the Terrain's splatmap (from your ASSET folder - a child of your terrain asset), press continue and it will ask you for the location of the PNG.", "Continue", "Cancel")) {
		return;
	}
	if (!EditorUtility.DisplayDialog("REMINDER!", "You should have selected the terrain's splatmap already from your assets folder. It will ask you for the NEW PNG right away. The order is important!.", "OK", "Cancel")) {
		return;
	}

	var texture : Texture2D = Selection.activeObject as Texture2D;
		if (texture == null) {
			EditorUtility.DisplayDialog("Select The Splatmap", "You need to select the terrain's splatmap from your asset folder first (a child of your terrain asset). Try again once you have done so.", "OK");
		    return;
	 	}

	var path = EditorUtility.OpenFilePanel("Select the PNG to copy over your splatmap.", "", "png");
	if (path.Length != 0) {

		var textureColors = texture.GetPixels();

		Debug.Log ("path was " + path);
		var pngtexture = WWW("file:///" + path);

		pngtexture.LoadImageIntoTexture(texture);
		texture.Apply();
	} else {
		EditorUtility.DisplayDialog("Cancel or Error", "Either you hit cancel, or there was an error attempting to read the file (check the debug log - you may need to set your PNG's read/write flag by choosing 'Texture Type - Advanced' so that it can be read.)", "OK");
		return;
	}

	AssetDatabase.Refresh();
	EditorUtility.DisplayDialog("Done!", "If it worked, there should be no errors in your debug log, and hopefully the terrain will look correct after you hit OK.\n\nIf the splatmap took the texturebut it is ALL WHITE, you may need to run the 2nd step on the texture first, and do this again after.\n\nAsssuming all went well, you may want to select the PNG and disable the read/write flags now.", "OK");


}

```
**脚本需要放置在Editor文件夹下才能够使用**
选择Terrain文件上的Splatmap贴图，使用脚本里的Save Select Splatmap to Png命令，得到的
贴图导入到ps里进行处理。主要处理两个方面：
1、对贴图进行旋转和翻转操作，使其和原来Terrain的方向一致
2、对贴图的蓝色通道进行处理，在使用过程中发现蓝色通道有颜色溢出，导致有些区域出现黑色斑块。
可以对蓝色部分进行降低颜色值。有大神也可以直接修改shader，使其符合自己使用意图。这里本人直
接在ps上对通道颜色进行了处理。

后期实现
--------
在之前我们得到了Terrain的一个低模fbx文件和一张通道混合贴图，那么我们可以通过特定的shader
使模型在不同区域利用混合贴图定位不同的贴图使用。在之前的isg项目中使用过类似的shader，其脚
本如下：
```
Shader "Isg_Mobile/Isg_Terrain_Decal"
{
	Properties
	{
		_Tex_1_1 ("Terain 1_1 (Mix_R)", 2D) = "white" {}
		_Tex_1_2 ("Terain 1_2 (Mix_G)", 2D) = "white" {}
		_Tex_1_3 ("Terain 1_3 (Mix_B)", 2D) = "white" {}
		//_Tex_1_4 ("Terain 1_4 (Mix_A)", 2D) = "white" {}
		_MixTex ("MixTexture(RGBA)", 2D) = "white" {}
	}

	SubShader
	{
		Tags { "RenderType"="Opaque" }
		LOD 250

		CGPROGRAM
		#pragma surface surf Lambert noforwardadd
		#pragma target 3.0

		sampler2D _Tex_1_1;
		sampler2D _Tex_1_2;
		sampler2D _Tex_1_3;
		sampler2D _Tex_1_4;
		sampler2D _MixTex;

		struct Input
		{
			float2 uv_Tex_1_1;
			float2 uv_Tex_1_2;
			float2 uv_Tex_1_3;
			float2 uv_Tex_1_4;
			float2 uv_MixTex;
		};

		void surf (Input IN, inout SurfaceOutput o)
		{
			fixed4 mixV = tex2D(_MixTex, IN.uv_MixTex);

			fixed4 color_def = (1,1,1,1);

			fixed4 tmp_color = tex2D(_Tex_1_1, IN.uv_Tex_1_1);
			float totalWeight = mixV.r;
			color_def.rgb = lerp (color_def.rgb, tmp_color.rgb, (mixV.r / totalWeight));

			tmp_color = tex2D(_Tex_1_2, IN.uv_Tex_1_2);
			totalWeight = totalWeight + mixV.g;
			color_def.rgb = lerp (color_def.rgb, tmp_color.rgb, (mixV.g / totalWeight));

			tmp_color = tex2D(_Tex_1_3, IN.uv_Tex_1_3);
			totalWeight = totalWeight + mixV.b*0.7;
			color_def.rgb = lerp (color_def.rgb, tmp_color.rgb, (mixV.b / totalWeight));


			o.Albedo = color_def.rgb;
			o.Alpha = 1;
			o.Normal = UnpackNormal (tex2D(_Tex_1_4, IN.uv_Tex_1_4));

		}

		ENDCG
	}

	Fallback "Diffuse"
}
```
利用Terrain使用的三张贴图，依次放在材质球对应的贴图上，就能够得到和原来Terrain几乎一模一
样的效果了
**其A通道为一张Normalmap贴图，这里我们不使用法线，故将其忽略即可**

最终效果实现
--------
最终得到的效果如下图所示：

![](/blog.github.io/img/post-terrain/post-terrain-04.png)

**其结果基本和原来Terrain一致，部分边缘有差别的是由于地形截图后又做了一点修改，所以海的
边缘部分有形状上的细微差别**

后记
--------
这是自己写的最有质量的一篇博文了，内容包含了程序，美术，软件包含了ps，max，unity，vs的使
用，感觉收获颇多。最近一段时间忙忙碌碌，断断续续写了好久，终于理清了思路和障碍，将其记录下
来，以便以后的查阅和使用。
2017-4-13 写完这篇博客偶然在Assetstore发现了和这种方法几乎一样的插件，思路都是相同的，以
下是插件的下载链接： https://www.assetstore.unity3d.com/en/#!/content/47276
